5.2.1 Integration tests

Before writing the routes for our application, we’ll continue with our test-driven development by writing some tests for them. There are several ways to test routes, and I’m going to take this opportunity to introduce integration tests, which I think are rather under-used in Rails land. Integration tests can help us test routes and a lot more besides.

We start with a generator for a layout links integration spec:

$ mkdir spec/integration
$ script/generate integration_spec layout_links
      create  spec/integration/layout_links_spec.rb 

Note that the generator automatically appends _spec.rb to the name of our test file.

Our integration test will use the same get function we used in Section 3.2 in the Pages controller spec, with code like this:

describe "GET 'home'" do
  it "should be successful" do
    get 'home'
    response.should be_success
  end
end

In this section, we want to test URLs like / and /about, but you can’t get these URLs inside a controller test—controller tests only know about URLs defined for that exact controller. In contrast, integration tests are bound by no such restriction, since they are designed as integrated tests for the whole application and hence can get any page they want.

Following the model of the Pages controller spec, we can write an integration spec for each of the pages in Table 5.1 that we’ve already created, namely, Home, About, Contact, and Help. To make sure the right template (i.e., view) is rendered in each case, we’ll use the render_template function inside RSpec. The test definitions appear in Listing 5.13. Of course, at this point they should fail (Red); we’ll get them to Green in Section 5.2.2.
Listing 5.13. Integration test for routes.
spec/integration/layout_links_spec.rb

require 'spec_helper'

describe "Layout links" do
  it "should have a Home page at '/'" do
    get '/'
    response.should render_template('pages/home')
  end

  it "should have a Contact page at '/contact'" do
    get '/contact'
    response.should render_template('pages/contact')
  end

  it "should have an About page at '/about'" do
    get '/about'
    response.should render_template('pages/about')
  end

  it "should have a Help page at '/help'" do
    get '/help'
    response.should render_template('pages/help')
  end
end

By the way, if you don’t have a Help page at this point, now would be a good time to add one. (If you solved the Chapter 3 exercises in Section 3.5, you already have one.) First, add the help action to the Pages controller (Listing 5.14). Then, create the corresponding view (Listing 5.15).
Listing 5.14. Adding the help action to the Pages controller.
app/controllers/pages_controller.rb

class PagesController < ApplicationController
  .
  .
  .
  def help
    @title = "Help"
  end
end

Listing 5.15. Adding a view for the Help page.
app/views/pages/help.html.erb

<h2>Help</h2>
<p>
  Get help on Ruby on Rails Tutorial at the
  <a href="http://railstutorial.org/help">Rails Tutorial help page</a>.
  To get help on this sample app, see the
  <a href="http://railstutorial.org/book">Rails Tutorial book</a>.
</p>

There’s one final detail to deal with before moving on: if you’re running Autotest, you might notice that it doesn’t run the integration test. Apparently this is by design, since integration tests can be slow and hence can disrupt the red-green-refactor cycle. Nevertheless, I still find it preferable to include the integration tests in Autotest. To get this to work, you just have to tell Autotest to run tests in the spec/integration directory (Listing 5.16 or Listing 5.17).
Listing 5.16. Additions to .autotest needed to run integration tests with Autotest on OS X.

Autotest.add_hook :initialize do |autotest|
  autotest.add_mapping(/^spec\/integration\/.*_spec\.rb$/) do
    autotest.files_matching(/^spec\/integration\/.*_spec\.rb$/)
  end  
end

Listing 5.17. Additions to .autotest needed to run integration tests with Autotest on Ubuntu Linux.

Autotest.add_hook :initialize do |autotest|
  autotest.add_mapping(%r%^spec/(integration)/.*rb$%) do|filename, _|
    filename
  end
end 

(Don’t worry about where this code comes from; I don’t know the Autotest API either. At some point I Googled around with search terms like “rspec autotest integration” and found it, and when I dropped it into my .autotest file, it worked.)